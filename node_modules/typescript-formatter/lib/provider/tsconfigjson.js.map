{"version":3,"file":"tsconfigjson.js","sourceRoot":"","sources":["tsconfigjson.ts"],"names":[],"mappings":";;AAAA,+BAAiC;AAEjC,2BAA6B;AAG7B,kCAA2D;AAE3D,+BAAsC,QAAgB,EAAE,IAAa,EAAE,cAAqC;IAExG,IAAI,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC;IAC/F,IAAI,cAA6B,CAAC;IAClC,IAAI,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE;QACzD,cAAc,GAAG,IAAI,CAAC,YAAY,CAAC;KACtC;SAAM;QACH,cAAc,GAAG,yBAAiB,CAAC,OAAO,EAAE,IAAI,CAAC,YAAY,IAAI,eAAe,CAAC,CAAC;KACrF;IACD,IAAI,CAAC,cAAc,EAAE;QACjB,OAAO,cAAc,CAAC;KACzB;IACD,IAAI,IAAI,CAAC,OAAO,EAAE;QACd,OAAO,CAAC,GAAG,CAAC,UAAQ,cAAc,aAAQ,QAAU,CAAC,CAAC;KACzD;IAED,IAAI,MAAM,GAAG,oBAAY,CAAC,cAAc,CAAC,CAAC;IAC1C,IAAI,MAAM,CAAC,OAAO,CAAC,OAAO,KAAK,EAAE,CAAC,WAAW,CAAC,sBAAsB,EAAE;QAClE,cAAc,CAAC,gBAAgB,GAAG,MAAM,CAAC;KAC5C;SAAM,IAAI,MAAM,CAAC,OAAO,CAAC,OAAO,KAAK,EAAE,CAAC,WAAW,CAAC,QAAQ,EAAE;QAC3D,cAAc,CAAC,gBAAgB,GAAG,IAAI,CAAC;KAC1C;IAED,OAAO,cAAc,CAAC;AAC1B,CAAC;AAxBD,sDAwBC","sourcesContent":["import * as ts from \"typescript\";\n\nimport * as path from \"path\";\n\nimport { Options } from \"../\";\nimport { getConfigFileName, readTsconfig } from \"../utils\";\n\nexport function makeFormatCodeOptions(fileName: string, opts: Options, formatSettings: ts.FormatCodeSettings): ts.FormatCodeSettings {\n\n    let baseDir = opts.baseDir ? path.resolve(opts.baseDir) : path.dirname(path.resolve(fileName));\n    let configFileName: string | null;\n    if (opts.tsconfigFile && path.isAbsolute(opts.tsconfigFile)) {\n        configFileName = opts.tsconfigFile;\n    } else {\n        configFileName = getConfigFileName(baseDir, opts.tsconfigFile || \"tsconfig.json\");\n    }\n    if (!configFileName) {\n        return formatSettings;\n    }\n    if (opts.verbose) {\n        console.log(`read ${configFileName} for ${fileName}`);\n    }\n\n    let parsed = readTsconfig(configFileName);\n    if (parsed.options.newLine === ts.NewLineKind.CarriageReturnLineFeed) {\n        formatSettings.newLineCharacter = \"\\r\\n\";\n    } else if (parsed.options.newLine === ts.NewLineKind.LineFeed) {\n        formatSettings.newLineCharacter = \"\\n\";\n    }\n\n    return formatSettings;\n}\n"]}