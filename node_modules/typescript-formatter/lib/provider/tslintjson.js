"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var path = require("path");
var utils_1 = require("../utils");
function makeFormatCodeOptions(fileName, opts, formatSettings) {
    return __awaiter(this, void 0, void 0, function () {
        var rules, indent, whitespace, p;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, getRules(fileName, opts)];
                case 1:
                    rules = _a.sent();
                    if (!rules) {
                        return [2 /*return*/, formatSettings];
                    }
                    indent = rules.get("indent");
                    whitespace = rules.get("whitespace");
                    if (indent && indent.ruleArguments) {
                        switch (indent.ruleArguments[0]) {
                            case "spaces":
                                formatSettings.convertTabsToSpaces = true;
                                break;
                            case "tabs":
                                formatSettings.convertTabsToSpaces = false;
                                break;
                            default:
                                break;
                        }
                    }
                    if (whitespace && whitespace.ruleArguments) {
                        for (p in whitespace.ruleArguments) {
                            switch (whitespace.ruleArguments[p]) {
                                case "check-branch":
                                    formatSettings.insertSpaceAfterKeywordsInControlFlowStatements = true;
                                    break;
                                case "check-operator":
                                    formatSettings.insertSpaceBeforeAndAfterBinaryOperators = true;
                                    break;
                                case "check-separator":
                                    formatSettings.insertSpaceAfterCommaDelimiter = true;
                                    formatSettings.insertSpaceAfterSemicolonInForStatements = true;
                                    break;
                                case "check-typecast":
                                    formatSettings.insertSpaceAfterTypeAssertion = true;
                                    break;
                                default:
                                    break;
                            }
                        }
                    }
                    return [2 /*return*/, formatSettings];
            }
        });
    });
}
exports.makeFormatCodeOptions = makeFormatCodeOptions;
function postProcess(fileName, formattedCode, opts, _formatSettings) {
    return __awaiter(this, void 0, void 0, function () {
        var rules;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, getRules(fileName, opts)];
                case 1:
                    rules = _a.sent();
                    if (!rules) {
                        return [2 /*return*/, formattedCode];
                    }
                    if (rules.has("no-consecutive-blank-lines")) {
                        formattedCode = formattedCode.replace(/\n+^$/mg, "\n");
                    }
                    return [2 /*return*/, formattedCode];
            }
        });
    });
}
exports.postProcess = postProcess;
function getRules(fileName, opts) {
    return __awaiter(this, void 0, void 0, function () {
        var baseDir, configFileName, Configuration, rules;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    baseDir = opts.baseDir ? path.resolve(opts.baseDir) : path.dirname(path.resolve(fileName));
                    if (opts.tslintFile && path.isAbsolute(opts.tslintFile)) {
                        configFileName = opts.tslintFile;
                    }
                    else {
                        configFileName = utils_1.getConfigFileName(baseDir, opts.tslintFile || "tslint.json");
                    }
                    if (!configFileName) {
                        return [2 /*return*/, undefined];
                    }
                    if (opts.verbose) {
                        console.log("read " + configFileName + " for " + fileName);
                    }
                    return [4 /*yield*/, Promise.resolve().then(function () { return require("tslint"); })];
                case 1:
                    Configuration = (_a.sent()).Configuration;
                    rules = Configuration.loadConfigurationFromPath(configFileName).rules;
                    return [2 /*return*/, rules];
            }
        });
    });
}
//# sourceMappingURL=tslintjson.js.map