{"version":3,"file":"vscodesettings.js","sourceRoot":"","sources":["vscodesettings.ts"],"names":[],"mappings":"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","sourcesContent":["import * as ts from \"typescript\";\n\nimport * as path from \"path\";\nimport * as fs from \"fs\";\n\nimport { Options } from \"../\";\nimport { getConfigFileName, parseJSON } from \"../utils\";\n\n// https://code.visualstudio.com/Docs/customization/userandworkspace\ninterface VSCodeSettings {\n    \"typescript.format.insertSpaceAfterCommaDelimiter\": boolean;\n    \"typescript.format.insertSpaceAfterConstructor\": boolean;\n    \"typescript.format.insertSpaceAfterSemicolonInForStatements\": boolean;\n    \"typescript.format.insertSpaceBeforeAndAfterBinaryOperators\": boolean;\n    \"typescript.format.insertSpaceAfterKeywordsInControlFlowStatements\": boolean;\n    \"typescript.format.insertSpaceAfterFunctionKeywordForAnonymousFunctions\": boolean;\n    \"typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis\": boolean;\n    \"typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets\": boolean;\n    \"typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces\": boolean;\n    \"typescript.format.insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces\": boolean;\n    \"typescript.format.insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces\": boolean;\n    \"typescript.format.insertSpaceAfterTypeAssertion\": boolean;\n    \"typescript.format.insertSpaceBeforeFunctionParenthesis\": boolean;\n    \"typescript.format.placeOpenBraceOnNewLineForFunctions\": boolean;\n    \"typescript.format.placeOpenBraceOnNewLineForControlBlocks\": boolean;\n\n    // NOTE https://github.com/Microsoft/vscode/issues/10296\n    // baseIndentSize\n}\n\nexport function makeFormatCodeOptions(fileName: string, opts: Options, formatSettings: ts.FormatCodeSettings): ts.FormatCodeSettings {\n\n    let baseDir = opts.baseDir ? path.resolve(opts.baseDir) : path.dirname(path.resolve(fileName));\n    let configFileName: string | null;\n    if (opts.vscodeFile && path.isAbsolute(opts.vscodeFile)) {\n        configFileName = opts.vscodeFile;\n    } else {\n        configFileName = getConfigFileName(baseDir, opts.vscodeFile || \".vscode/settings.json\");\n    }\n    if (!configFileName) {\n        return formatSettings;\n    }\n    if (opts.verbose) {\n        console.log(`read ${configFileName} for ${fileName}`);\n    }\n\n    let config: VSCodeSettings = parseJSON(fs.readFileSync(configFileName, \"utf-8\"));\n    if (config[\"typescript.format.insertSpaceAfterCommaDelimiter\"] != null) {\n        formatSettings.insertSpaceAfterCommaDelimiter = config[\"typescript.format.insertSpaceAfterCommaDelimiter\"];\n    }\n    if (config[\"typescript.format.insertSpaceAfterConstructor\"] != null) {\n        formatSettings.insertSpaceAfterConstructor = config[\"typescript.format.insertSpaceAfterConstructor\"];\n    }\n    if (config[\"typescript.format.insertSpaceAfterSemicolonInForStatements\"] != null) {\n        formatSettings.insertSpaceAfterSemicolonInForStatements = config[\"typescript.format.insertSpaceAfterSemicolonInForStatements\"];\n    }\n    if (config[\"typescript.format.insertSpaceBeforeAndAfterBinaryOperators\"] != null) {\n        formatSettings.insertSpaceBeforeAndAfterBinaryOperators = config[\"typescript.format.insertSpaceBeforeAndAfterBinaryOperators\"];\n    }\n    if (config[\"typescript.format.insertSpaceAfterKeywordsInControlFlowStatements\"] != null) {\n        formatSettings.insertSpaceAfterKeywordsInControlFlowStatements = config[\"typescript.format.insertSpaceAfterKeywordsInControlFlowStatements\"];\n    }\n    if (config[\"typescript.format.insertSpaceAfterFunctionKeywordForAnonymousFunctions\"] != null) {\n        formatSettings.insertSpaceAfterFunctionKeywordForAnonymousFunctions = config[\"typescript.format.insertSpaceAfterFunctionKeywordForAnonymousFunctions\"];\n    }\n    if (config[\"typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis\"] != null) {\n        formatSettings.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis = config[\"typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis\"];\n    }\n    if (config[\"typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets\"] != null) {\n        formatSettings.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets = config[\"typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets\"];\n    }\n    if (config[\"typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces\"] != null) {\n        formatSettings.insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces = config[\"typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces\"];\n    }\n    if (config[\"typescript.format.insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces\"] != null) {\n        formatSettings.insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces = config[\"typescript.format.insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces\"];\n    }\n    if (config[\"typescript.format.insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces\"] != null) {\n        formatSettings.insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces = config[\"typescript.format.insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces\"];\n    }\n    if (config[\"typescript.format.insertSpaceAfterTypeAssertion\"] != null) {\n        formatSettings.insertSpaceAfterTypeAssertion = config[\"typescript.format.insertSpaceAfterTypeAssertion\"];\n    }\n    if (config[\"typescript.format.insertSpaceBeforeFunctionParenthesis\"] != null) {\n        formatSettings.insertSpaceBeforeFunctionParenthesis = config[\"typescript.format.insertSpaceBeforeFunctionParenthesis\"];\n    }\n    if (config[\"typescript.format.placeOpenBraceOnNewLineForFunctions\"] != null) {\n        formatSettings.placeOpenBraceOnNewLineForFunctions = config[\"typescript.format.placeOpenBraceOnNewLineForFunctions\"];\n    }\n    if (config[\"typescript.format.placeOpenBraceOnNewLineForControlBlocks\"] != null) {\n        formatSettings.placeOpenBraceOnNewLineForControlBlocks = config[\"typescript.format.placeOpenBraceOnNewLineForControlBlocks\"];\n    }\n\n    return formatSettings;\n}\n"]}